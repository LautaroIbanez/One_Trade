export interface TradeResponse { id: number; symbol: string; side: string; entry_price: number; exit_price: number | null; quantity: number; entry_time: string; exit_time: string | null; pnl: number | null; pnl_percentage: number | null; duration_hours: number | null; entry_signal: string | null; exit_signal: string | null; confidence: number | null; is_open: boolean; } export interface BacktestResponse { id: number; name: string; symbol: string; strategy_name: string; start_date: string; end_date: string; initial_capital: number; final_capital: number | null; total_return: number | null; annualized_return: number | null; sharpe_ratio: number | null; max_drawdown: number | null; win_rate: number | null; total_trades: number | null; avg_trade_duration: number | null; best_trade: number | null; worst_trade: number | null; strategy_params: Record<string, any> | null; timeframe: string; status: string; created_at: string; updated_at: string; } export interface BacktestMetricResponse { total_return: number; annualized_return: number; sharpe_ratio: number; max_drawdown: number; win_rate: number; total_trades: number; avg_trade_duration: number; best_trade: number; worst_trade: number; profit_factor: number; recovery_factor: number; calmar_ratio: number; sortino_ratio: number; } export interface QuickBacktestResult { symbol: string; strategy: string; period: string; initial_capital: number; final_capital: number; total_return: string; annualized_return: string; sharpe_ratio: string; max_drawdown: string; win_rate: string; total_trades: number; avg_trade_duration: string; best_trade: string; worst_trade: string; profit_factor: string; calmar_ratio: string; sortino_ratio: string; } export interface StrategyComparisonResult { [strategyName: string]: { total_return?: string; annualized_return?: string; sharpe_ratio?: string; max_drawdown?: string; win_rate?: string; total_trades?: number; profit_factor?: string; calmar_ratio?: string; sortino_ratio?: string; error?: string; }; } export interface StrategyComparison { symbol: string; period: string; initial_capital: number; strategies: StrategyComparisonResult; } export const parsePercentageString = (value: string | number | null | undefined): number => { if (value === null || value === undefined) return 0; if (typeof value === 'number') return value; const cleaned = String(value).replace('%', '').trim(); const parsed = parseFloat(cleaned); return isNaN(parsed) ? 0 : parsed; }; export const parseNumericString = (value: string | number | null | undefined): number => { if (value === null || value === undefined) return 0; if (typeof value === 'number') return value; const cleaned = String(value).replace(/[^\d.-]/g, ''); const parsed = parseFloat(cleaned); return isNaN(parsed) ? 0 : parsed; }; export const normalizeQuickBacktestResult = (raw: QuickBacktestResult): QuickBacktestResult & { total_return_num: number; annualized_return_num: number; sharpe_ratio_num: number; max_drawdown_num: number; win_rate_num: number; profit_factor_num: number; calmar_ratio_num: number; sortino_ratio_num: number; best_trade_num: number; worst_trade_num: number; } => { return { ...raw, total_return_num: parsePercentageString(raw.total_return), annualized_return_num: parsePercentageString(raw.annualized_return), sharpe_ratio_num: parseNumericString(raw.sharpe_ratio), max_drawdown_num: parsePercentageString(raw.max_drawdown), win_rate_num: parsePercentageString(raw.win_rate), profit_factor_num: parseNumericString(raw.profit_factor), calmar_ratio_num: parseNumericString(raw.calmar_ratio), sortino_ratio_num: parseNumericString(raw.sortino_ratio), best_trade_num: parsePercentageString(raw.best_trade), worst_trade_num: parsePercentageString(raw.worst_trade), }; };

