import { describe, it, expect, vi, beforeEach } from 'vitest'; import { render, screen, waitFor } from '@testing-library/react'; import EnhancedRecommendations from '../EnhancedRecommendations'; import type { EnhancedRecommendation } from '../../types/recommendations'; vi.mock('../../hooks/useMockData', () => ({ useMockData: () => ({ MOCK_MODE: true, getRecommendation: vi.fn(async (symbol: string) => { const mockRec: EnhancedRecommendation = { symbol, current_price: 45000, recommendation: 'BUY', confidence: 0.75, reasoning: 'Test reasoning', risk_assessment: { level: 'LOW', consistency: 0.75, signal_distribution: { BUY: 1.0 }, factors: ['Test factor'] }, strategy_signals: [{ strategy: 'RSI + MACD', signal: 'BUY', confidence: 0.75, weight: 1.0, reasoning: 'Test signal reasoning', timestamp: new Date().toISOString() }], scores: { buy_score: 0.75, sell_score: 0.15, hold_score: 0.10 }, market_context: { trend: 'BULLISH', volatility: 'MEDIUM', recent_performance: { day_1: 0.025, day_7: 0.05, volatility: 0.08 }, market_activity: { volume_24h: 1000000, trades_24h: 50000, price_momentum: 0.03 } }, timestamp: new Date().toISOString() }; return mockRec; }), getSupportedSymbols: vi.fn(async () => ['BTCUSDT', 'ETHUSDT', 'ADAUSDT']), }) })); describe('EnhancedRecommendations', () => { beforeEach(() => { vi.clearAllMocks(); }); it('should render without crashing in mock mode', async () => { render(<EnhancedRecommendations />); await waitFor(() => { expect(screen.queryByText(/Loading/i)).not.toBeInTheDocument(); }); }); it('should display three recommendation cards', async () => { render(<EnhancedRecommendations />); await waitFor(() => { expect(screen.getByText('BTCUSDT')).toBeInTheDocument(); expect(screen.getByText('ETHUSDT')).toBeInTheDocument(); expect(screen.getByText('ADAUSDT')).toBeInTheDocument(); }); }); it('should display formatted prices', async () => { render(<EnhancedRecommendations />); await waitFor(() => { const priceElements = screen.getAllByText(/\$.*,.*\.\d{2}/); expect(priceElements.length).toBeGreaterThan(0); }); }); it('should display confidence percentages', async () => { render(<EnhancedRecommendations />); await waitFor(() => { const confidenceElements = screen.getAllByText(/Confidence:/); expect(confidenceElements.length).toBeGreaterThan(0); }); }); it('should display risk levels', async () => { render(<EnhancedRecommendations />); await waitFor(() => { const riskElements = screen.getAllByText(/Risk/); expect(riskElements.length).toBeGreaterThan(0); }); }); it('should display strategy signals', async () => { render(<EnhancedRecommendations />); await waitFor(() => { const signalsHeader = screen.getAllByText(/Strategy Signals:/); expect(signalsHeader.length).toBeGreaterThan(0); }); }); it('should display reasoning section', async () => { render(<EnhancedRecommendations />); await waitFor(() => { const reasoningHeaders = screen.getAllByText(/Reasoning:/); expect(reasoningHeaders.length).toBeGreaterThan(0); }); }); });
